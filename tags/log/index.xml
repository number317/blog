<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Log on cheon's blog</title><link>https://number317.github.io/blog/tags/log/</link><description>Recent content in Log on cheon's blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Tue, 17 Dec 2024 19:51:41 +0800</lastBuildDate><atom:link href="https://number317.github.io/blog/tags/log/index.xml" rel="self" type="application/rss+xml"/><item><title>Logstash to ES</title><link>https://number317.github.io/blog/struct/logstash_to_es/</link><pubDate>Thu, 04 Jul 2019 09:26:33 +0800</pubDate><guid>https://number317.github.io/blog/struct/logstash_to_es/</guid><description>&lt;h1 id="logstash-配置日志发送-es">logstash 配置日志发送 ES&lt;/h1>
&lt;p>日志收集的架构如下所示:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>┌────────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│Java logback│\
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└────────────┘ \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┌─────┐ ┌────────┐ ┌──────┐ ┌────────┐
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │kafka│ ───&amp;gt; │logstash│ ───&amp;gt; │ ES │ ───&amp;gt; │ kibana │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─────┘ └────────┘ └──────┘ └────────┘
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>┌────────────┐ /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>│Java logback│/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└────────────┘
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>java 应用日志通过 logback 发送给 kafka，logstash 从 kafka 消费日志，并将日志转发给 ES。一开始一个应用一个 kafka topic，logstash 消费了之后根据 topic 来确定 ES 的索引。&lt;/p>
&lt;p>logback 的配置:&lt;/p>
&lt;details>
&lt;summary>logback.xml&lt;/summary>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&amp;lt;appender name=&lt;span style="color:#666;font-style:italic">&amp;#34;KAFKA&amp;#34;&lt;/span> class=&lt;span style="color:#666;font-style:italic">&amp;#34;com.github.danielwegener.logback.kafka.KafkaAppender&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;encoder class=&lt;span style="color:#666;font-style:italic">&amp;#34;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;#34;&lt;/span> charset=&lt;span style="color:#666;font-style:italic">&amp;#34;UTF-8&amp;#34;&lt;/span> &amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;pattern&amp;gt;%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n&amp;lt;/pattern&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/encoder&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;topic&amp;gt;spring-boot-demo&amp;lt;/topic&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;keyingStrategy class=&lt;span style="color:#666;font-style:italic">&amp;#34;com.github.danielwegener.logback.kafka.keying.NoKeyKeyingStrategy&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;deliveryStrategy class=&lt;span style="color:#666;font-style:italic">&amp;#34;com.github.danielwegener.logback.kafka.delivery.AsynchronousDeliveryStrategy&amp;#34;&lt;/span>/&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;producerConfig&amp;gt;bootstrap.servers=192.168.0.107:9092&amp;lt;/producerConfig&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　 　　&amp;lt;producerConfig&amp;gt;retries=1&amp;lt;/producerConfig&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　 　　&amp;lt;producerConfig&amp;gt;batch-size=16384&amp;lt;/producerConfig&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　 　　&amp;lt;producerConfig&amp;gt;buffer-memory=33554432&amp;lt;/producerConfig&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>　 　　&amp;lt;producerConfig&amp;gt;properties.max.request.size==2097152&amp;lt;/producerConfig&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/appender&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;logger name=&lt;span style="color:#666;font-style:italic">&amp;#34;com.cheon.demo&amp;#34;&lt;/span> level=&lt;span style="color:#666;font-style:italic">&amp;#34;INFO&amp;#34;&lt;/span> additivity=&lt;span style="color:#666;font-style:italic">&amp;#34;false&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;appender-ref ref=&lt;span style="color:#666;font-style:italic">&amp;#34;KAFKA&amp;#34;&lt;/span> /&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/logger&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/details>
&lt;p>pom 文件依赖:&lt;/p></description></item><item><title>Graylog Sidecar</title><link>https://number317.github.io/blog/struct/graylog_sidecar/</link><pubDate>Wed, 14 Nov 2018 17:24:04 +0800</pubDate><guid>https://number317.github.io/blog/struct/graylog_sidecar/</guid><description>&lt;h1 id="graylog-sidecar-部署配置">graylog sidecar 部署配置&lt;/h1>
&lt;p>graylog sidecar 用于配置从文件读取日志，具体读取文件可以采用filebeat和nxlog。这里在debian的容器中部署sidecar来示例。&lt;/p>
&lt;h2 id="安装sidecar">安装sidecar&lt;/h2>
&lt;p>从&lt;a href="https://github.com/Graylog2/collector-sidecar/releases">下载页面&lt;/a>下载对应的包，这里是debian系统，graylog版本是2.4。所以根据文档，下载&lt;code>collector-sidecar_0.1.7-1_amd64.deb&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -OL &lt;span style="color:#666;font-style:italic">&amp;#34;https://github.com/Graylog2/collector-sidecar/releases/download/0.1.7/collector-sidecar_0.1.7-1_amd64.deb&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载好后安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>dpkg -i collector-sidecar_0.1.7-1_amd64.deb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装好后配置system服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>graylog-collector-sidecar -service install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个命令会生成&lt;code>/etc/init.d/collector-sidecar&lt;/code>脚步，但是在容器中可能systemctl命令执行不了，可以直接执行该脚本。&lt;/p>
&lt;h2 id="配置sidecar">配置sidecar&lt;/h2>
&lt;p>编辑配置文件&lt;code>/etc/graylog/collector-sidecar&lt;/code>，改为以下内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span style="display:flex;">&lt;span>server_url: http://graylog.test.com/api/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update_interval: 10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tls_skip_verify: &lt;span style="font-weight:bold;font-style:italic">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>send_status: &lt;span style="font-weight:bold;font-style:italic">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>list_log_files:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - /&lt;span style="font-weight:bold">var&lt;/span>/&lt;span style="font-weight:bold;font-style:italic">log&lt;/span>/connect-check/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>collector_id: file:/etc/graylog/collector-sidecar/collector-id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cache_path: /&lt;span style="font-weight:bold">var&lt;/span>/cache/graylog/collector-sidecar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log_path: /&lt;span style="font-weight:bold">var&lt;/span>/&lt;span style="font-weight:bold;font-style:italic">log&lt;/span>/graylog/collector-sidecar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log_rotation_time: 86400
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>log_max_age: 604800
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tags:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - connect-check
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>backends:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: nxlog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="font-weight:bold;font-style:italic">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> binary_path: /usr/bin/nxlog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configuration_path: /etc/graylog/collector-sidecar/generated/nxlog.conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - name: filebeat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> enabled: &lt;span style="font-weight:bold;font-style:italic">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> binary_path: /usr/bin/filebeat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> configuration_path: /etc/graylog/collector-sidecar/generated/filebeat.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>主要是修改&lt;code>server_url&lt;/code>和&lt;code>tags&lt;/code>两项内容。&lt;/p></description></item><item><title>Graylog K8s Install</title><link>https://number317.github.io/blog/struct/graylog_k8s_install/</link><pubDate>Wed, 14 Nov 2018 16:20:50 +0800</pubDate><guid>https://number317.github.io/blog/struct/graylog_k8s_install/</guid><description>&lt;h1 id="graylog-k8s-部署">graylog k8s 部署&lt;/h1>
&lt;p>graylog是一个日志聚合工具，用于统一展示应用日志。这里基于官方文档，在k8s集群中部署一套简单的单节点graylog服务。&lt;/p>
&lt;h2 id="mongodb-部署">mongodb 部署&lt;/h2>
&lt;p>mongodb 在服务中用于存储graylog的配置信息。以下是部署文件（没有进行数据持久化操作）：&lt;/p>
&lt;details>
&lt;summary>mongodb deploy&lt;/summary>
```yaml
# {{{ deploy
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: graylog-mongo
 labels:
 app: graylog-mongo
spec:
 replicas: 1
 selector:
 matchLabels:
 app: graylog-mongo
 template:
 metadata:
 labels:
 app: graylog-mongo
 spec:
 containers:
 - name: graylog-mongo
 image: mongo:3
 ports:
 - containerPort: 27017
 protocol: TCP
 resources:
 limits:
 memory: 512Mi
 requests:
 memory: 100Mi
 terminationMessagePath: /dev/termination-log
 imagePullPolicy: IfNotPresent
 restartPolicy: Always
 terminationGracePeriodSeconds: 30
 dnsPolicy: ClusterFirst
 securityContext: {}
 strategy:
 type: RollingUpdate
 rollingUpdate:
 maxUnavailable: 0
 maxSurge: 1
 revisionHistoryLimit: 2
# }}}
# {{{ service
---
apiVersion: v1
kind: Service
metadata:
 name: graylog-mongo
 labels:
 name: mongo
spec:
 ports:
 - name: mongo
 protocol: TCP
 port: 27017
 targetPort: 27017
 selector:
 app: graylog-mongo
 type: ClusterIP
 sessionAffinity: None
status:
 loadBalancer: {}
# }}}
```
&lt;/details>
&lt;h2 id="elasticsearch-部署">elasticsearch 部署&lt;/h2>
&lt;p>elasticsearch 在服务中用于存储日志数据。以下是部署文件（没有进行数据持久化操作）：&lt;/p></description></item><item><title>Fluentd Config</title><link>https://number317.github.io/blog/struct/fluentd_config/</link><pubDate>Fri, 05 Jan 2018 10:14:58 +0800</pubDate><guid>https://number317.github.io/blog/struct/fluentd_config/</guid><description>&lt;h1 id="命令列表">命令列表&lt;/h1>
&lt;p>Fluentd配置文件由以下配置文件组成：&lt;/p>
&lt;ol>
&lt;li>&lt;code>source&lt;/code>命令 指明数据输入源&lt;/li>
&lt;li>&lt;code>match&lt;/code>命令 指明数据输出源&lt;/li>
&lt;li>&lt;code>filter&lt;/code>命令 指明事件处理的管道&lt;/li>
&lt;li>&lt;code>system&lt;/code>命令 指明系统级别配置&lt;/li>
&lt;li>&lt;code>label&lt;/code>命令 为输出分组并过滤内部路由&lt;/li>
&lt;li>&lt;code>include&lt;/code>命令 包含其他文件&lt;/li>
&lt;/ol>
&lt;h1 id="命令详解">命令详解&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>&lt;code>source&lt;/code>: 数据的来源&lt;/p>
&lt;p>Fluentd的输入源通过&lt;code>source&lt;/code>命令选择和配置想要的输入插件来启用。Fluentd的标准输入插件包括&lt;code>http&lt;/code>和&lt;code>forward&lt;/code>。&lt;code>http&lt;/code>使得Fluentd转变为一个HTTP终端用于接收到来的HTTP信息，而&lt;code>forward&lt;/code>将fluentd转变为一个TCP终端用于接收TCP包。当然，它们可以被同时启用。&lt;/p>
&lt;pre>&lt;code> # Receive events from 24224/tcp
 # This is used by log forwarding and the fluent-cat command
 &amp;lt;source&amp;gt;
 @type forward
 port 24224
 &amp;lt;/source&amp;gt;

 # http://this.host:9880/myapp.access?json={&amp;quot;event&amp;quot;:&amp;quot;data&amp;quot;}
 &amp;lt;source&amp;gt;
 @type http
 port 9880
 &amp;lt;/source&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>每一个&lt;code>source&lt;/code>命令必须包含一个&lt;code>type&lt;/code>参数。&lt;code>type&lt;/code>参数指定使用哪一个输入插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>match&lt;/code>: 告诉fluentd做什么&lt;/p>
&lt;p>&lt;code>match&lt;/code>命令寻找匹配标签的事件并且处理它们。&lt;code>match&lt;/code>命令最常见的用法是将事件输出到其他系统（由于这个原因，这些插件被称为”输出插件“）。Fluentd的标准输出插件包括&lt;code>file&lt;/code>和&lt;code>forward&lt;/code>。&lt;/p>
&lt;pre>&lt;code> # Receive events from 24224/tcp
 # This is used by log forwarding and the fluent-cat command
 &amp;lt;source&amp;gt;
 @type forward
 port 24224
 &amp;lt;/source&amp;gt;

 # http://this.host:9880/myapp.access?json={&amp;quot;event&amp;quot;:&amp;quot;data&amp;quot;}
 &amp;lt;source&amp;gt;
 @type http
 port 9880
 &amp;lt;/source&amp;gt;

 # Match events tagged with &amp;quot;myapp.access&amp;quot; and
 # store them to /var/log/fluent/access.%Y-%m-%d
 # Of course, you can control how you partition your data
 # with the time_slice_format option.
 &amp;lt;match myapp.access&amp;gt;
 @type file
 path /var/log/fluent/access
 &amp;lt;/match&amp;gt;
&lt;/code>&lt;/pre>
&lt;p>每一个&lt;code>match&lt;/code>命令必须包括一个匹配的样式(match pattern)和一个&lt;code>type&lt;/code>参数。只有拥有一个和匹配样式(match pattern)匹配的标签的事件才会被送到输出源（在上面的例子中，只有拥有&amp;quot;myapp.access&amp;quot;标签的事件是匹配的）。&lt;code>type&lt;/code>参数指定了哪个输出插件被使用。&lt;/p></description></item></channel></rss>